What happens when you initialize a repository? Why do you need to do it?

A hidden directory gets created in the directory of the repository. This is where all the history will be tracked. By doing it myself, I have full controll over what is placed under control and when. 


How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is where something is set to be added to the repository. It is not committed yet. you can continue working in the working directory.
The only value I see is it provides a temporary stopping place before storing a file in case last minute change of mind, before doing an actual commit.

How can you use the staging area to make sure you have one commit per logical
change?

Make sure to add files to the staging area that only apply to the logical block of work you are doing and then commit it. Then do the same for each logical block after that for the whole project. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Continue using the master branch to commit changes to the master files and what would be common to branches derived from it. Branches allow the master to still be the main branch for say a main version or release master and branches for variants of the master that don't warrant their own master line or for experimental work which may or may not ever see the light of day, all without messing up the main line. 


How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
